** General
*** Reload
#+begin_src emacs-lisp
(defun my/reload-emacs-configuration ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+end_src
*** Backups
Change backup directory
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

"Disk space is cheap. Save lots."
#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
*** Add to the Struture template list
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
*** Helm
#+begin_src emacs-lisp
(use-package helm
  :diminish helm-mode
  :init
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-c h" . helm-mini)
         ("C-x b" . helm-buffers-list)))
(use-package helm-projectile)
#+end_src

*** Misc better defaults
#+begin_src emacs-lisp
(setq-default
  inhibit-splash-screen t
  initial-scratch-message nil
  indent-tabs-mode nil
  use-package-always-ensure t)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(global-visual-line-mode 1)  ; wrap lines
(global-linum-mode)  ; show line numbers

(column-number-mode 1)                       ; Show the column number
(display-time-mode 1)                        ; Enable time in the mode-line
(fset 'yes-or-no-p 'y-or-n-p)                ; Replace yes/no prompts with y/n
(global-hl-line-mode)                        ; Hightlight current line
(set-default-coding-systems 'utf-8)          ; Default to utf-8 encoding
(show-paren-mode 1)
#+end_src
*** Trim whitespace on save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Navigation
*** Save place mode
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src
*** Recent files
#+begin_src emacs-lisp
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode 1)
#+end_src
*** Custom key bindings with Mac's command key
#+begin_src emacs-lisp
(setq mac-command-modifier 'super)
(global-set-key (kbd "s-<up>") 'windmove-up)
(global-set-key (kbd "s-<down>") 'windmove-down)
(global-set-key (kbd "s-<left>") 'windmove-left)
(global-set-key (kbd "s-<right>") 'windmove-right)
#+end_src
** Appearance
*** UTF-8
From sachc from http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
*** Window appearance
Disable GUI aspects of emacs
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
(tooltip-mode -1)
#+end_src
*** Theme
#+begin_src emacs-lisp
(use-package solarized-theme)
(load-theme 'solarized-dark t)
#+end_src
*** Typography
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Iosevka"
                    :height 130
                    :weight 'semi-light
                    :width 'normal)
#+end_src
*** hide the markers for *bold*, /italics/, +strikeout+
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
*** Mode line
#+begin_src emacs-lisp
(use-package smart-mode-line)
#+end_src
** Publishing
*** UTF-8 checkboxes
This snippet turns =- [X]= into ☑ and =- [ ]= into ☐, but leaves =[-]= alone.
#+begin_src emacs-lisp
(setq org-html-checkbox-type 'unicode)
(setq org-html-checkbox-types
 '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
            (off . "<span class=\"task-todo\">&#x2610;</span>")
            (trans . "<span class=\"task-in-progress\">[-]</span>"))))
#+end_src
** Org
*** Keyboard Shortcuts
#+begin_src emacs-lisp
(bind-key "C-c r" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src
*** Navigation

*** Appearance
Most of this comes from [[ https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]
**** Indent mode
Display text lines that are not headlines with virtual spaces in order to align with the headline text
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
**** Replace dash with bullet
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
**** Replace all headline markers with different unicode bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
**** Custom fonts for the levels
#+begin_src emacs-lisp
  (let* ((variable-tuple
          (cond
           ((x-list-fonts "Iosevka") '(:font "Iosevka"))
           ((x-list-fonts "Inconsolata") '(:font "Inconsolata"))
           ((x-list-fonts "Consolas") '(:font "Consolas"))
           ((x-list-fonts "Source Code Pro") '(:font "Source Code Pro"))
           (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight demibold :foreground "#839496")))

    ;; below are mostly custom heights, the original had level-1 as 1.75
    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.05))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.2))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.3))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src
*** Tasks
- The vertical bar separates the ‘TODO’ keywords (states that need action) from the ‘DONE’ states (which need no further action).
- The paranthesis indicate keyqord shortcuts for setting the state.
- Tracking of state changes is done  by adding special markers ‘!’ (for a timestamp) or ‘@’ (for a note with timestamp) in the parentheses after the keywords.
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t)"
         "IN-PROGRESS"
         "WAITING(w@/!)"
         "|"
         "DONE(x!)"
         "CANCELLED(c@)")))
#+end_src
*** Taking notes
Set up defaults
#+begin_src emacs-lisp
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/organizer.org")
#+end_src
*** Capture
#+begin_src emacs-lisp
(use-package org-capture
  :ensure nil
  :after org
  :preface
  (defvar my/org-inbox-file "~/org/organizer.org")
  :custom
  (org-capture-templates
    `(("t" "Quick task" entry
      (file+headline ,my/org-inbox-file "Inbox")
      "* TODO %^{Task}\n"
      :immediate-finish t)
     ("." "Today" entry
      (file+headline ,my/org-inbox-file)
      "* TODO %^{Task}\nSCHEDULED: %t\n"
      :immediate-finish t))))
#+end_src
*** Agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org)
#+end_src
Files to scan for TODOs
#+begin_src emacs-lisp
(setq org-agenda-files
  (delq nil
    (mapcar (lambda (x) (and x (file-exists-p x) x))
     `("~/org/organizer.org"
       "~/org/work.org"
       "~/org/personal.org"
       "~/org/routines.org"))))
#+end_src
More settings
#+begin_src emacs-lisp
(setq org-agenda-span 2)                   ; Look at 2 days at a time
(setq org-agenda-inhibit-startup t)        ; Speeds up startup time
(setq org-agenda-show-log t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
#+end_src
*** Refile
#+begin_src emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-cache nil)
(setq org-refile-use-outline-path nil)
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))
#+end_src
